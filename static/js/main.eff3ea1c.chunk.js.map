{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handlechange","handlesubmit","className","action","type","placeholder","onChange","onClick","Component","TodoItem","id","title","handledel","aria-hidden","TodoList","items","map","key","App","state","uuid","editItem","handleChange","e","setState","target","value","handleSubmit","preventDefault","newItem","updateItem","handleDel","console","log","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2LAqCeA,E,uKAlCH,IAAD,EACsCC,KAAKC,MAA1CC,EADD,EACCA,KAAMC,EADP,EACOA,aAAcC,EADrB,EACqBA,aAI5B,OACE,yBAAKC,UAAU,uBACb,0BAAMC,OAAO,IACX,yBAAKD,UAAU,eACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,0CACb,uBAAGA,UAAU,kBAGjB,2BACEE,KAAK,OACLF,UAAU,+BACVG,YAAaN,EACbO,SAAUN,KAGd,4BACEE,UAAU,mDAEVK,QAASN,GAHX,kB,GAtBcO,aCyBTC,E,uKAxBH,IAAD,EAC0BZ,KAAKC,MAA9BY,EADD,EACCA,GAAIC,EADL,EACKA,MAAOC,EADZ,EACYA,UAGnB,OACE,wBAAIV,UAAU,kEACZ,4BAAKS,GACL,yBAAKT,UAAU,aACb,0BAAMA,UAAU,QACd,uBAAGA,UAAU,0BAA0BW,cAAY,UAErD,0BAAMX,UAAU,QACd,uBACEA,UAAU,2BACVW,cAAY,OACZN,QAAS,kBAAMK,EAAUF,a,GAhBhBF,aCgCRM,E,uKA9BH,IAAD,EACsBjB,KAAKC,MAA1BiB,EADD,EACCA,MAAOH,EADR,EACQA,UAKf,OACE,wBAAIV,UAAU,mBACZ,wBAAIA,UAAU,+BAAd,aAECa,EAAMC,KAAI,SAACjB,GAEV,OACE,kBAAC,EAAD,CACEkB,IAAKlB,EAAKW,GACVA,GAAIX,EAAKW,GACTC,MAAOZ,EAAKY,MACZC,UAAWA,OAKjB,4BAAQV,UAAU,iDAAlB,mB,GAvBeM,a,wBC4ERU,E,4MAvEbC,MAAQ,CACNJ,MAAO,GACPL,GAAIU,MACJrB,KAAM,GACNsB,UAAU,G,EAEZC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZzB,KAAMwB,EAAEE,OAAOC,S,EAKnBC,aAAe,SAACJ,GACdA,EAAEK,iBAEF,IAAMC,EAAU,CACdnB,GAAIU,MACJT,MAAO,EAAKQ,MAAMpB,MAGd+B,EAAU,sBAAO,EAAKX,MAAMJ,OAAlB,CAAyBc,IACzC,EAAKL,UAAS,WACZ,MAAO,CACLd,GAAIU,MACJrB,KAAM,EAAKoB,MAAMpB,KACjBgB,MAAOe,EACPT,UAAU,O,EAIhBU,UAAY,SAACrB,GACXsB,QAAQC,IAAIvB,GACZ,IAAMoB,EAAa,EAAKX,MAAMJ,MAAMmB,QAAO,SAACnC,GAAD,OAAUA,EAAKW,KAAOA,KACjEsB,QAAQC,IAAIH,GACZ,EAAKN,UAAS,WACZ,MAAO,CACLd,GAAIU,MACJrB,KAAM,EAAKoB,MAAMpB,KACjBgB,MAAOe,EACPT,UAAU,O,uDAad,OACE,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,+BAAd,cACA,kBAAC,EAAD,CACEH,KAAMF,KAAKsB,MAAMpB,KACjBC,aAAcH,KAAKyB,aACnBrB,aAAcJ,KAAK8B,eAErB,kBAAC,EAAD,CAAUZ,MAAOlB,KAAKsB,MAAMJ,MAAOH,UAAWf,KAAKkC,mB,GAhE7CvB,aCKE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.eff3ea1c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TodoInput extends Component {\r\n  render() {\r\n    const { item, handlechange, handlesubmit } = this.props;\r\n    // console.log(item);\r\n    // console.log(handlechange);\r\n    // console.log(handlesubmit);\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n        <form action=\"\">\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text bg-primary text-white\">\r\n                <i className=\"fas fa-book\"></i>\r\n              </div>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-capitalize\"\r\n              placeholder={item}\r\n              onChange={handlechange}\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"btn btn-block btn-primary mt-3\r\n            text-capitalize\"\r\n            onClick={handlesubmit}\r\n          >\r\n            add item\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n    const { id, title, handledel } = this.props;\r\n    // console.log(id);\r\n\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"mx-2\">\r\n            <i className=\"fas fa-pen text-success\" aria-hidden=\"true\" />\r\n          </span>\r\n          <span className=\"mx-2\">\r\n            <i\r\n              className=\"fas fa-trash text-danger\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => handledel(id)}\r\n            />\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    const { items, handledel } = this.props;\r\n\r\n    // console.log(handledel);\r\n    // console.log(item);\r\n\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n        <h3 className=\"text-capitalize text-center\">todo list</h3>\r\n\r\n        {items.map((item) => {\r\n          // console.log(item.id);\r\n          return (\r\n            <TodoItem\r\n              key={item.id}\r\n              id={item.id}\r\n              title={item.title}\r\n              handledel={handledel}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <button className=\"btn btn-block btn-danger text-capitalize mt-5\">\r\n          clear list\r\n        </button>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import uuid from \"uuid\";\nimport uuid from \"react-uuid\";\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false,\n  };\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value,\n    });\n\n    // console.log(\"dsqdddddddddddddddddd\" + this.state.item);\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state.item);\n    const newItem = {\n      id: uuid(),\n      title: this.state.item,\n    };\n\n    const updateItem = [...this.state.items, newItem];\n    this.setState(() => {\n      return {\n        id: uuid(),\n        item: this.state.item,\n        items: updateItem,\n        editItem: false,\n      };\n    });\n  };\n  handleDel = (id) => {\n    console.log(id);\n    const updateItem = this.state.items.filter((item) => item.id !== id);\n    console.log(updateItem);\n    this.setState(() => {\n      return {\n        id: uuid(),\n        item: this.state.item,\n        items: updateItem,\n        editItem: false,\n      };\n    });\n\n    // console.log(\"test\");\n    // console.log(this.state);\n\n    // const tab = [1, 2, 3];\n    // const arr = tab.filter((item) => item != 3);\n  };\n\n  render() {\n    // console.log(this.state.items);\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 col-md-8 mx-auto mt-4\">\n            <h3 className=\"text-capitalize text-center\">Todo Input</h3>\n            <TodoInput\n              item={this.state.item}\n              handlechange={this.handleChange}\n              handlesubmit={this.handleSubmit}\n            />\n            <TodoList items={this.state.items} handledel={this.handleDel} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}